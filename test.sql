WITH test_case(name, expected, actual) AS (
  SELECT
    'bar_width ' || val,
    expected,
    graph(val)
  FROM (VALUES
    (10.01, '██████████'),
    (10.00, '██████████'),
    ( 9.99, '██████████'),
    ( 9.76, '██████████'),
    ( 9.75, '██████████'),
    ( 9.74, '█████████▌'),
    ( 9.26, '█████████▌'),
    ( 9.25, '█████████▌'),
    ( 9.24, '█████████'),
    ( 9.01, '█████████'),
    ( 9.00, '█████████'),
    ( 8.99, '█████████'),
    ( 1.01, '█'),
    ( 1.00, '█'),
    ( 0.99, '█'),
    ( 0.76, '█'),
    ( 0.75, '█'),
    ( 0.74, '▌'),
    ( 0.26, '▌'),
    ( 0.25, '▌'),
    ( 0.24, ''),
    ( 0.01, ''),
    ( 0.00, ''),
    (-0.01, NULL),
    
    (  3::smallint,         '███'),
    (  3::integer,          '███'),
    (  3::bigint,           '███'),
    (  3::numeric,          '███'),
    (  3::numeric(1),       '███'),
    (  3::numeric(1,0),     '███'),
    (3.4::numeric(2,1),     '███▌'),
    (  3::real,             '███'),
    (  3::double precision, '███')
  ) AS data(val, expected)
  
  UNION
  
  SELECT
    'bar_width_neg ' || val || ',' || lpad,
    expected,
    graph_neg(val, lpad)
  FROM (VALUES
    ( 10.01, 10, '··········██████████'),
    ( 10.00, 10, '··········██████████'),
    (  9.99, 10, '··········██████████'),
    (  9.76, 10, '··········██████████'),
    (  9.75, 10, '··········██████████'),
    (  9.74, 10, '··········█████████▌'),
    (  9.26, 10, '··········█████████▌'),
    (  9.25, 10, '··········█████████▌'),
    (  9.24, 10, '··········█████████'),
    (  9.01, 10, '··········█████████'),
    (  9.00, 10, '··········█████████'),
    (  8.99, 10, '··········█████████'),
    (  1.01, 10, '··········█'),
    (  1.00, 10, '··········█'),
    (  0.99, 10, '··········█'),
    (  0.76, 10, '··········█'),
    (  0.75, 10, '··········█'),
    (  0.74, 10, '··········▌'),
    (  0.26, 10, '··········▌'),
    (  0.25, 10, '··········▌'),
    (  0.24, 10, '··········'),
    ( -0.01, 10, '··········'),
    ( -0.00, 10, '··········'),
    ( -0.01, 10, '··········'),
    ( -0.24, 10, '··········'),
    ( -0.25, 10, '·········▐'),
    ( -0.26, 10, '·········▐'),
    ( -0.74, 10, '·········▐'),
    ( -0.75, 10, '·········█'),
    ( -0.76, 10, '·········█'),
    ( -0.99, 10, '·········█'),
    ( -1.00, 10, '·········█'),
    ( -1.01, 10, '·········█'),
    ( -8.99, 10, '·█████████'),
    ( -9.00, 10, '·█████████'),
    ( -9.01, 10, '·█████████'),
    ( -9.24, 10, '·█████████'),
    ( -9.25, 10, '▐█████████'),
    ( -9.26, 10, '▐█████████'),
    ( -9.74, 10, '▐█████████'),
    ( -9.75, 10, '██████████'),
    ( -9.76, 10, '██████████'),
    ( -9.99, 10, '██████████'),
    (-10.00, 10, '██████████'),
    (-10.01, 10, NULL),
    (-11.00, 10, NULL),
    (  3.50,  0, '███▌'),
    
    (-1, -1, NULL),
    ( 0, -1, NULL),
    ( 1, -1, NULL),
    (-1,  0, NULL),
    ( 0,  0, ''),
    ( 1,  0, '█'),
    (-1,  1, '█'),
    (-2,  1, NULL),
    ( 0,  1, '·'),
    ( 1,  1, '·█'),
    
    (   3::smallint,         4, '····███'),
    (   3::integer,          4, '····███'),
    (   3::bigint,           4, '····███'),
    (   3::numeric,          4, '····███'),
    (   3::numeric(1),       4, '····███'),
    (   3::numeric(1,0),     4, '····███'),
    ( 3.4::numeric(2,1),     4, '····███▌'),
    (   3::real,             4, '····███'),
    (   3::double precision, 4, '····███'),
    (  -3::smallint,         4, '·███'),
    (  -3::integer,          4, '·███'),
    (  -3::bigint,           4, '·███'),
    (  -3::numeric,          4, '·███'),
    (  -3::numeric(1),       4, '·███'),
    (  -3::numeric(1,0),     4, '·███'),
    (-3.4::numeric(2,1),     4, '▐███'),
    (  -3::real,             4, '·███'),
    (  -3::double precision, 4, '·███')
  ) AS data(val, lpad, expected)
  
  UNION
  
  SELECT
    'min_max ' || val || ',' || min || ',' || max || ',' || coalesce(graph_width::TEXT, 'NULL'),
    expected,
    CASE WHEN graph_width IS NULL
      THEN graph(val, min, max)
      ELSE graph(val, min, max, graph_width)
    END
  FROM (VALUES
    (  5.0,  -4,   4, 20, NULL),
    (  4.5,  -4,   4, 20, NULL),
    (  4.0,  -4,   4, 20, '··········██████████'),
    (  3.5,  -4,   4, 20, '··········█████████'),
    (  3.0,  -4,   4, 20, '··········███████▌'),
    (  2.5,  -4,   4, 20, '··········██████▌'),
    (  2.0,  -4,   4, 20, '··········█████'),
    (  1.5,  -4,   4, 20, '··········████'),
    (  1.0,  -4,   4, 20, '··········██▌'),
    (  0.5,  -4,   4, 20, '··········█▌'),
    (  0.0,  -4,   4, 20, '··········'),
    ( -0.5,  -4,   4, 20, '········▐█'),
    ( -1.0,  -4,   4, 20, '·······▐██'),
    ( -1.5,  -4,   4, 20, '······████'),
    ( -2.0,  -4,   4, 20, '·····█████'),
    ( -2.5,  -4,   4, 20, '···▐██████'),
    ( -3.0,  -4,   4, 20, '··▐███████'),
    ( -3.5,  -4,   4, 20, '·█████████'),
    ( -4.0,  -4,   4, 20, '██████████'),
    ( -4.5,  -4,   4, 20, NULL),
    ( -5.0,  -4,   4, 20, NULL),
    ( 50.0, -40,  40, 20, NULL),
    ( 45.0, -40,  40, 20, NULL),
    ( 40.0, -40,  40, 20, '··········██████████'),
    ( 35.0, -40,  40, 20, '··········█████████'),
    ( 30.0, -40,  40, 20, '··········███████▌'),
    ( 25.0, -40,  40, 20, '··········██████▌'),
    ( 20.0, -40,  40, 20, '··········█████'),
    ( 15.0, -40,  40, 20, '··········████'),
    ( 10.0, -40,  40, 20, '··········██▌'),
    (  5.0, -40,  40, 20, '··········█▌'),
    (  0.0, -40,  40, 20, '··········'),
    ( -5.0, -40,  40, 20, '········▐█'),
    (-10.0, -40,  40, 20, '·······▐██'),
    (-15.0, -40,  40, 20, '······████'),
    (-20.0, -40,  40, 20, '·····█████'),
    (-25.0, -40,  40, 20, '···▐██████'),
    (-30.0, -40,  40, 20, '··▐███████'),
    (-35.0, -40,  40, 20, '·█████████'),
    (-40.0, -40,  40, 20, '██████████'),
    (-45.0, -40,  40, 20, NULL),
    (-50.0, -40,  40, 20, NULL),
    
    (  5.0,  -2,   4, 15, NULL),
    (  4.5,  -2,   4, 15, NULL),
    (  4.0,  -2,   4, 15, '·····██████████'),
    (  3.5,  -2,   4, 15, '·····█████████'),
    (  3.0,  -2,   4, 15, '·····███████▌'),
    (  2.5,  -2,   4, 15, '·····██████▌'),
    (  2.0,  -2,   4, 15, '·····█████'),
    (  1.5,  -2,   4, 15, '·····████'),
    (  1.0,  -2,   4, 15, '·····██▌'),
    (  0.5,  -2,   4, 15, '·····█▌'),
    (  0.0,  -2,   4, 15, '·····'),
    ( -0.5,  -2,   4, 15, '···▐█'),
    ( -1.0,  -2,   4, 15, '··▐██'),
    ( -1.5,  -2,   4, 15, '·████'),
    ( -2.0,  -2,   4, 15, '█████'),
    ( -2.5,  -2,   4, 15, NULL),
    ( -3.0,  -2,   4, 15, NULL),
    ( 50.0, -20,  40, 15, NULL),
    ( 45.0, -20,  40, 15, NULL),
    ( 40.0, -20,  40, 15, '·····██████████'),
    ( 35.0, -20,  40, 15, '·····█████████'),
    ( 30.0, -20,  40, 15, '·····███████▌'),
    ( 25.0, -20,  40, 15, '·····██████▌'),
    ( 20.0, -20,  40, 15, '·····█████'),
    ( 15.0, -20,  40, 15, '·····████'),
    ( 10.0, -20,  40, 15, '·····██▌'),
    (  5.0, -20,  40, 15, '·····█▌'),
    (  0.0, -20,  40, 15, '·····'),
    ( -5.0, -20,  40, 15, '···▐█'),
    (-10.0, -20,  40, 15, '··▐██'),
    (-15.0, -20,  40, 15, '·████'),
    (-20.0, -20,  40, 15, '█████'),
    (-25.0, -20,  40, 15, NULL),
    (-30.0, -20,  40, 15, NULL),
    
    (  5.0,   0,   4, 10, NULL),
    (  4.5,   0,   4, 10, NULL),
    (  4.0,   0,   4, 10, '██████████'),
    (  3.5,   0,   4, 10, '█████████'),
    (  3.0,   0,   4, 10, '███████▌'),
    (  2.5,   0,   4, 10, '██████▌'),
    (  2.0,   0,   4, 10, '█████'),
    (  1.5,   0,   4, 10, '████'),
    (  1.0,   0,   4, 10, '██▌'),
    (  0.5,   0,   4, 10, '█▌'),
    (  0.0,   0,   4, 10, ''),
    ( -0.5,   0,   4, 10, NULL),
    ( -1.0,   0,   4, 10, NULL),
    ( 50.0,   0,  40, 10, NULL),
    ( 45.0,   0,  40, 10, NULL),
    ( 40.0,   0,  40, 10, '██████████'),
    ( 35.0,   0,  40, 10, '█████████'),
    ( 30.0,   0,  40, 10, '███████▌'),
    ( 25.0,   0,  40, 10, '██████▌'),
    ( 20.0,   0,  40, 10, '█████'),
    ( 15.0,   0,  40, 10, '████'),
    ( 10.0,   0,  40, 10, '██▌'),
    (  5.0,   0,  40, 10, '█▌'),
    (  0.0,   0,  40, 10, ''),
    ( -5.0,   0,  40, 10, NULL),
    (-10.0,   0,  40, 10, NULL),
    
    (  5.0,   2,   4, 10, NULL),
    (  4.5,   2,   4, 10, NULL),
    (  4.0,   2,   4, 10, '██████████'),
    (  3.5,   2,   4, 10, '█████████'),
    (  3.0,   2,   4, 10, '███████▌'),
    (  2.5,   2,   4, 10, '██████▌'),
    (  2.0,   2,   4, 10, '█████'),
    (  1.5,   2,   4, 10, NULL),
    (  1.0,   2,   4, 10, NULL),
    ( 50.0,  20,  40, 10, NULL),
    ( 45.0,  20,  40, 10, NULL),
    ( 40.0,  20,  40, 10, '██████████'),
    ( 35.0,  20,  40, 10, '█████████'),
    ( 30.0,  20,  40, 10, '███████▌'),
    ( 25.0,  20,  40, 10, '██████▌'),
    ( 20.0,  20,  40, 10, '█████'),
    ( 15.0,  20,  40, 10, NULL),
    ( 10.0,  20,  40, 10, NULL),
    
    (  1.0,  -4,   0, 10, NULL),
    (  0.5,  -4,   0, 10, NULL),
    (  0.0,  -4,   0, 10, '··········'),
    ( -0.5,  -4,   0, 10, '········▐█'),
    ( -1.0,  -4,   0, 10, '·······▐██'),
    ( -1.5,  -4,   0, 10, '······████'),
    ( -2.0,  -4,   0, 10, '·····█████'),
    ( -2.5,  -4,   0, 10, '···▐██████'),
    ( -3.0,  -4,   0, 10, '··▐███████'),
    ( -3.5,  -4,   0, 10, '·█████████'),
    ( -4.0,  -4,   0, 10, '██████████'),
    ( -4.5,  -4,   0, 10, NULL),
    ( -5.0,  -4,   0, 10, NULL),
    ( 10.0, -40,   0, 10, NULL),
    (  5.0, -40,   0, 10, NULL),
    (  0.0, -40,   0, 10, '··········'),
    ( -5.0, -40,   0, 10, '········▐█'),
    (-10.0, -40,   0, 10, '·······▐██'),
    (-15.0, -40,   0, 10, '······████'),
    (-20.0, -40,   0, 10, '·····█████'),
    (-25.0, -40,   0, 10, '···▐██████'),
    (-30.0, -40,   0, 10, '··▐███████'),
    (-35.0, -40,   0, 10, '·█████████'),
    (-40.0, -40,   0, 10, '██████████'),
    (-45.0, -40,   0, 10, NULL),
    (-50.0, -40,   0, 10, NULL),
    
    ( -1.0,  -4,  -2, 10, NULL),
    ( -1.5,  -4,  -2, 10, NULL),
    ( -2.0,  -4,  -2, 10, '·····█████'),
    ( -2.5,  -4,  -2, 10, '···▐██████'),
    ( -3.0,  -4,  -2, 10, '··▐███████'),
    ( -3.5,  -4,  -2, 10, '·█████████'),
    ( -4.0,  -4,  -2, 10, '██████████'),
    ( -4.5,  -4,  -2, 10, NULL),
    ( -5.0,  -4,  -2, 10, NULL),
    (-10.0, -40, -20, 10, NULL),
    (-15.0, -40, -20, 10, NULL),
    (-20.0, -40, -20, 10, '·····█████'),
    (-25.0, -40, -20, 10, '···▐██████'),
    (-30.0, -40, -20, 10, '··▐███████'),
    (-35.0, -40, -20, 10, '·█████████'),
    (-40.0, -40, -20, 10, '██████████'),
    (-45.0, -40, -20, 10, NULL),
    (-50.0, -40, -20, 10, NULL),
    
    (1, 1, 1, NULL, '██████████████████████████████████████████████████'),
    
    ( 1,  1,  1,  1, '█'),
    ( 1,  0,  1,  1, '█'),
    (-1, -1, -1,  1, '█'),
    (-1, -1,  0,  1, '█'),
    ( 1, -1,  1,  2, '·█'),
    (-1, -1,  1,  2, '█'),
    ( 1, -2,  2,  2, '·▌'),
    (-1, -2,  2,  2, '▐'),
    ( 0,  0,  0,  0, ''),
    ( 1,  1,  1, -1, NULL),
    ( 1,  1,  1,  0, ''),
    (-1, -1,  1, -1, NULL),
    (-1, -1,  1,  0, ''),
    ( 1,  0, -1,  1, NULL),
    ( 1,  0,  0,  1, NULL),
    ( 0,  0,  0,  1, ''),
    ( 0,  0,  1,  1, ''),
    ( 0, -1,  0,  1, '·'),
    ( 1, -1,  0,  1, NULL),
    ( 0,  1, -1,  1, NULL),
    
    (   3::smallint,         -4, 4, 20, '··········███████▌'),
    (   3::integer,          -4, 4, 20, '··········███████▌'),
    (   3::bigint,           -4, 4, 20, '··········███████▌'),
    (   3::numeric,          -4, 4, 20, '··········███████▌'),
    (   3::numeric(1),       -4, 4, 20, '··········███████▌'),
    (   3::numeric(1,0),     -4, 4, 20, '··········███████▌'),
    ( 3.4::numeric(2,1),     -4, 4, 20, '··········████████▌'),
    (   3::real,             -4, 4, 20, '··········███████▌'),
    (   3::double precision, -4, 4, 20, '··········███████▌'),
    (  -3::smallint,         -4, 4, 20, '··▐███████'),
    (  -3::integer,          -4, 4, 20, '··▐███████'),
    (  -3::bigint,           -4, 4, 20, '··▐███████'),
    (  -3::numeric,          -4, 4, 20, '··▐███████'),
    (  -3::numeric(1),       -4, 4, 20, '··▐███████'),
    (  -3::numeric(1,0),     -4, 4, 20, '··▐███████'),
    (-3.4::numeric(2,1),     -4, 4, 20, '·▐████████'),
    (  -3::real,             -4, 4, 20, '··▐███████'),
    (  -3::double precision, -4, 4, 20, '··▐███████')
  ) AS data(val, min, max, graph_width, expected)
  
  UNION
  
  SELECT
    'vals ' || name,
    expected,
    CASE WHEN graph_width IS NULL
      THEN (
        SELECT string_agg(graph, E'\n')
        FROM graph(vals) t1
      )
      ELSE (
        SELECT string_agg(graph, E'\n')
        FROM graph(vals, graph_width) t1
      )
    END
  FROM (
    SELECT
      'A',
      array_agg(val),
      20,
      string_agg(expected, E'\n')
    FROM (VALUES
      ( 4.0, '··········██████████'),
      ( 3.5, '··········█████████'),
      ( 3.0, '··········███████▌'),
      ( 2.5, '··········██████▌'),
      ( 2.0, '··········█████'),
      ( 1.5, '··········████'),
      ( 1.0, '··········██▌'),
      ( 0.5, '··········█▌'),
      ( 0.0, '··········'),
      (-0.5, '········▐█'),
      (-1.0, '·······▐██'),
      (-1.5, '······████'),
      (-2.0, '·····█████'),
      (-2.5, '···▐██████'),
      (-3.0, '··▐███████'),
      (-3.5, '·█████████'),
      (-4.0, '██████████')
    ) data(val, expected)
    
    UNION SELECT
      'B',
      array_agg(val),
      20,
      string_agg(expected, E'\n')
    FROM (VALUES
      ( 40, '··········██████████'),
      ( 35, '··········█████████'),
      ( 30, '··········███████▌'),
      ( 25, '··········██████▌'),
      ( 20, '··········█████'),
      ( 15, '··········████'),
      ( 10, '··········██▌'),
      (  5, '··········█▌'),
      (  0, '··········'),
      ( -5, '········▐█'),
      (-10, '·······▐██'),
      (-15, '······████'),
      (-20, '·····█████'),
      (-25, '···▐██████'),
      (-30, '··▐███████'),
      (-35, '·█████████'),
      (-40, '██████████')
    ) data(val, expected)
    
    UNION SELECT 'C', ARRAY[]::INT[], 20, NULL
    UNION SELECT 'D', ARRAY[1]::INT[], NULL, '██████████████████████████████████████████████████'
    
  ) data(name, vals, graph_width, expected)
  
  UNION
  
  SELECT
    'inputs ' || name,
    expected,
    CASE WHEN graph_width IS NULL
      THEN (
        SELECT string_agg(label || '|' || graph, E'\n')
        FROM graph(inputs) t1
      )
      ELSE (
        SELECT string_agg(label || '|' || graph, E'\n')
        FROM graph(inputs, graph_width) t1
      )
    END
  FROM (
    SELECT
      'A',
      array_agg((label, val)::graph_input),
      20,
      string_agg(label || '|' || expected, E'\n')
    FROM (VALUES
      ('a',  4.0, '··········██████████'),
      ('b',  3.5, '··········█████████'),
      ('c',  3.0, '··········███████▌'),
      ('d',  2.5, '··········██████▌'),
      ('e',  2.0, '··········█████'),
      ('f',  1.5, '··········████'),
      ('g',  1.0, '··········██▌'),
      ('h',  0.5, '··········█▌'),
      ('i',  0.0, '··········'),
      ('j', -0.5, '········▐█'),
      ('k', -1.0, '·······▐██'),
      ('l', -1.5, '······████'),
      ('m', -2.0, '·····█████'),
      ('n', -2.5, '···▐██████'),
      ('o', -3.0, '··▐███████'),
      ('p', -3.5, '·█████████'),
      ('q', -4.0, '██████████')
    ) data(label, val, expected)
    
    UNION SELECT
      'B',
      array_agg((label, val)::graph_input),
      20,
      string_agg(label || '|' || expected, E'\n')
    FROM (VALUES
      ('a',  40, '··········██████████'),
      ('b',  35, '··········█████████'),
      ('c',  30, '··········███████▌'),
      ('d',  25, '··········██████▌'),
      ('e',  20, '··········█████'),
      ('f',  15, '··········████'),
      ('g',  10, '··········██▌'),
      ('h',   5, '··········█▌'),
      ('i',   0, '··········'),
      ('j',  -5, '········▐█'),
      ('k', -10, '·······▐██'),
      ('l', -15, '······████'),
      ('m', -20, '·····█████'),
      ('n', -25, '···▐██████'),
      ('o', -30, '··▐███████'),
      ('p', -35, '·█████████'),
      ('q', -40, '██████████')
    ) data(label, val, expected)
    
    UNION SELECT 'C', ARRAY[]::graph_input[], 20, NULL
    UNION SELECT 'D', ARRAY[('a', 1)]::graph_input[], NULL, 'a|██████████████████████████████████████████████████'
    
  ) data(name, inputs, graph_width, expected)
)
SELECT
  expected is not distinct from replace(actual, ' ', '·') as result,
  name,
  expected,
  replace(actual, ' ', '·') AS actual
FROM test_case
ORDER BY 1, 2;
